trigger:
  branches:
    include:
    - main
  paths:
    include:
    - /application/TimeService/**
resources:
- repo: self
stages:
- stage: BuildStage
  displayName: Build
  dependsOn: 
  jobs:
  - job: BuildStage
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: CmdLine@2
      inputs:
        script: |2

          echo "This step would typically call 'make', but any build steps could go here."
          ls -l
      displayName: make
- stage: ReleaseStage
  displayName: Release
  dependsOn: BuildStage
  jobs:
  - job: ReleaseStage
    displayName: Release
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: CmdLine@2
      inputs:
        script: |2

          echo "Here we would run commands to build and push a docker image to ACR; e.g. `docker build`, `acr login`, `docker push`."
          ls -l
      displayName: Push docker image
- stage: CellDeployWave1
  displayName: Deploy (Wave 1)
  dependsOn: ReleaseStage
  jobs:
  - job: CellDeployalpha
    displayName: alpha
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(alpha) Here we would run commands to apply a k8s manifest, e.g. `kubectl apply -f application/TimeService/k8s/deployment.yml`."
          ls -l
      displayName: kubectl apply
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(alpha) Here we would run commands to apply a k8s manifest, e.g. `kubectl apply -f application/TimeService/k8s/service.yml`."
          ls -l
      displayName: kubectl apply
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(alpha) Here we would run arbitrary shell commands passed to the constructor, e.g. `application/TimeService/scripts/store-loadbalancer-address-to-appconfig.sh`."
          ls -l
      displayName: Store AppConfig
- stage: BakeWave1
  displayName: Bake (Wave 1)
  dependsOn: CellDeployWave1
  jobs:
  - job: BakeWave1
    displayName: Bake (Wave 1)
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(Cells: Cell { SubscriptionId = fake-alpha-subscription-id, CellName = alpha, CellType = PREPROD, BackendStorageContainer = AzureBackendStorageContainer { ResourceGroupName = cdktf-state, StorageAccountName = cdktfstate90210, ContainerName = cdktf-state }, Location = westus2 }) This step will execute a bake period to monitor the deployment from the previous wave and make sure there are no issues. It would typically involve a loop where we check all relevant alerts, sleep for a few minutes, and repeat, until a certain amount of time has transpired with no errors surfacing."
          ls -l
      displayName: Bake
- stage: CellDeployWave2
  displayName: Deploy (Wave 2)
  dependsOn: BakeWave1
  jobs:
  - job: CellDeploywestus3_1
    displayName: westus3_1
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(westus3_1) Here we would run commands to apply a k8s manifest, e.g. `kubectl apply -f application/TimeService/k8s/deployment.yml`."
          ls -l
      displayName: kubectl apply
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(westus3_1) Here we would run commands to apply a k8s manifest, e.g. `kubectl apply -f application/TimeService/k8s/service.yml`."
          ls -l
      displayName: kubectl apply
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(westus3_1) Here we would run arbitrary shell commands passed to the constructor, e.g. `application/TimeService/scripts/store-loadbalancer-address-to-appconfig.sh`."
          ls -l
      displayName: Store AppConfig
  - job: CellDeploysouthcentralus_1
    displayName: southcentralus_1
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(southcentralus_1) Here we would run commands to apply a k8s manifest, e.g. `kubectl apply -f application/TimeService/k8s/deployment.yml`."
          ls -l
      displayName: kubectl apply
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(southcentralus_1) Here we would run commands to apply a k8s manifest, e.g. `kubectl apply -f application/TimeService/k8s/service.yml`."
          ls -l
      displayName: kubectl apply
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(southcentralus_1) Here we would run arbitrary shell commands passed to the constructor, e.g. `application/TimeService/scripts/store-loadbalancer-address-to-appconfig.sh`."
          ls -l
      displayName: Store AppConfig
- stage: BakeWave2
  displayName: Bake (Wave 2)
  dependsOn: CellDeployWave2
  jobs:
  - job: BakeWave2
    displayName: Bake (Wave 2)
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(Cells: Cell { SubscriptionId = fake-westus3-1-subscription-id, CellName = westus3_1, CellType = PROD, BackendStorageContainer = AzureBackendStorageContainer { ResourceGroupName = cdktf-state, StorageAccountName = cdktfstate90214, ContainerName = cdktf-state }, Location = westus3 }, Cell { SubscriptionId = fake-southcentralus-1-subscription-id, CellName = southcentralus_1, CellType = PROD, BackendStorageContainer = AzureBackendStorageContainer { ResourceGroupName = cdktf-state, StorageAccountName = cdktfstate90213, ContainerName = cdktf-state }, Location = southcentralus }) This step will execute a bake period to monitor the deployment from the previous wave and make sure there are no issues. It would typically involve a loop where we check all relevant alerts, sleep for a few minutes, and repeat, until a certain amount of time has transpired with no errors surfacing."
          ls -l
      displayName: Bake
- stage: CellDeployWave3
  displayName: Deploy (Wave 3)
  dependsOn: BakeWave2
  jobs:
  - job: CellDeploywestus2_1
    displayName: westus2_1
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(westus2_1) Here we would run commands to apply a k8s manifest, e.g. `kubectl apply -f application/TimeService/k8s/deployment.yml`."
          ls -l
      displayName: kubectl apply
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(westus2_1) Here we would run commands to apply a k8s manifest, e.g. `kubectl apply -f application/TimeService/k8s/service.yml`."
          ls -l
      displayName: kubectl apply
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(westus2_1) Here we would run arbitrary shell commands passed to the constructor, e.g. `application/TimeService/scripts/store-loadbalancer-address-to-appconfig.sh`."
          ls -l
      displayName: Store AppConfig
  - job: CellDeployeastus1_1
    displayName: eastus1_1
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(eastus1_1) Here we would run commands to apply a k8s manifest, e.g. `kubectl apply -f application/TimeService/k8s/deployment.yml`."
          ls -l
      displayName: kubectl apply
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(eastus1_1) Here we would run commands to apply a k8s manifest, e.g. `kubectl apply -f application/TimeService/k8s/service.yml`."
          ls -l
      displayName: kubectl apply
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(eastus1_1) Here we would run arbitrary shell commands passed to the constructor, e.g. `application/TimeService/scripts/store-loadbalancer-address-to-appconfig.sh`."
          ls -l
      displayName: Store AppConfig
- stage: BakeWave3
  displayName: Bake (Wave 3)
  dependsOn: CellDeployWave3
  jobs:
  - job: BakeWave3
    displayName: Bake (Wave 3)
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: CmdLine@2
      inputs:
        script: |2

          echo "(Cells: Cell { SubscriptionId = fake-westus2-1-subscription-id, CellName = westus2_1, CellType = PROD, BackendStorageContainer = AzureBackendStorageContainer { ResourceGroupName = cdktf-state, StorageAccountName = cdktfstate90211, ContainerName = cdktf-state }, Location = westus2 }, Cell { SubscriptionId = fake-eastus1-1-subscription-id, CellName = eastus1_1, CellType = PROD, BackendStorageContainer = AzureBackendStorageContainer { ResourceGroupName = cdktf-state, StorageAccountName = cdktfstate90212, ContainerName = cdktf-state }, Location = eastus1 }) This step will execute a bake period to monitor the deployment from the previous wave and make sure there are no issues. It would typically involve a loop where we check all relevant alerts, sleep for a few minutes, and repeat, until a certain amount of time has transpired with no errors surfacing."
          ls -l
      displayName: Bake
